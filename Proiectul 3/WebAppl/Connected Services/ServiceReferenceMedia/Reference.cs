//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceMedia
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Media", Namespace="http://schemas.datacontract.org/2004/07/PictureManagerLibrary", IsReference=true)]
    public partial class Media : object
    {
        
        private int Id_MediaField;
        
        private bool Is_DeletedField;
        
        private string Media_nameField;
        
        private string Media_pathField;
        
        private System.Collections.Generic.List<ServiceReferenceMedia.TableWays> TableWaysField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id_Media
        {
            get
            {
                return this.Id_MediaField;
            }
            set
            {
                this.Id_MediaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is_Deleted
        {
            get
            {
                return this.Is_DeletedField;
            }
            set
            {
                this.Is_DeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Media_name
        {
            get
            {
                return this.Media_nameField;
            }
            set
            {
                this.Media_nameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Media_path
        {
            get
            {
                return this.Media_pathField;
            }
            set
            {
                this.Media_pathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferenceMedia.TableWays> TableWays
        {
            get
            {
                return this.TableWaysField;
            }
            set
            {
                this.TableWaysField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableWays", Namespace="http://schemas.datacontract.org/2004/07/PictureManagerLibrary", IsReference=true)]
    public partial class TableWays : object
    {
        
        private int IdField;
        
        private bool Is_DeletedField;
        
        private ServiceReferenceMedia.Media MediumField;
        
        private ServiceReferenceMedia.Tags TagField;
        
        private ServiceReferenceMedia.TagType TagTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is_Deleted
        {
            get
            {
                return this.Is_DeletedField;
            }
            set
            {
                this.Is_DeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Media Medium
        {
            get
            {
                return this.MediumField;
            }
            set
            {
                this.MediumField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Tags Tag
        {
            get
            {
                return this.TagField;
            }
            set
            {
                this.TagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.TagType TagType
        {
            get
            {
                return this.TagTypeField;
            }
            set
            {
                this.TagTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tags", Namespace="http://schemas.datacontract.org/2004/07/PictureManagerLibrary", IsReference=true)]
    public partial class Tags : object
    {
        
        private int Id_TagsField;
        
        private bool Is_DeletedField;
        
        private System.Collections.Generic.List<ServiceReferenceMedia.TableWays> TableWaysField;
        
        private string Value_tagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id_Tags
        {
            get
            {
                return this.Id_TagsField;
            }
            set
            {
                this.Id_TagsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is_Deleted
        {
            get
            {
                return this.Is_DeletedField;
            }
            set
            {
                this.Is_DeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferenceMedia.TableWays> TableWays
        {
            get
            {
                return this.TableWaysField;
            }
            set
            {
                this.TableWaysField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value_tag
        {
            get
            {
                return this.Value_tagField;
            }
            set
            {
                this.Value_tagField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagType", Namespace="http://schemas.datacontract.org/2004/07/PictureManagerLibrary", IsReference=true)]
    public partial class TagType : object
    {
        
        private int Id_TagTypeField;
        
        private bool Is_DeletedField;
        
        private System.Collections.Generic.List<ServiceReferenceMedia.TableWays> TableWaysField;
        
        private string Value_tagTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id_TagType
        {
            get
            {
                return this.Id_TagTypeField;
            }
            set
            {
                this.Id_TagTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is_Deleted
        {
            get
            {
                return this.Is_DeletedField;
            }
            set
            {
                this.Is_DeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferenceMedia.TableWays> TableWays
        {
            get
            {
                return this.TableWaysField;
            }
            set
            {
                this.TableWaysField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value_tagType
        {
            get
            {
                return this.Value_tagTypeField;
            }
            set
            {
                this.Value_tagTypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMedia.IMyBd")]
    public interface IMyBd
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/CreateMedia", ReplyAction="http://tempuri.org/InterfaceMedia/CreateMediaResponse")]
        System.Threading.Tasks.Task<bool> CreateMediaAsync(string pathName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/DeleteMediaByPath", ReplyAction="http://tempuri.org/InterfaceMedia/DeleteMediaByPathResponse")]
        System.Threading.Tasks.Task<bool> DeleteMediaByPathAsync(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/DeleteMediaByMedia", ReplyAction="http://tempuri.org/InterfaceMedia/DeleteMediaByMediaResponse")]
        System.Threading.Tasks.Task<bool> DeleteMediaByMediaAsync(ServiceReferenceMedia.Media media);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/UpdateMedia", ReplyAction="http://tempuri.org/InterfaceMedia/UpdateMediaResponse")]
        System.Threading.Tasks.Task<bool> UpdateMediaAsync(ServiceReferenceMedia.Media newMedia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetMediaByPath", ReplyAction="http://tempuri.org/InterfaceMedia/GetMediaByPathResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Media> GetMediaByPathAsync(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetMediaById", ReplyAction="http://tempuri.org/InterfaceMedia/GetMediaByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Media> GetMediaByIdAsync(int mediaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetMediaId", ReplyAction="http://tempuri.org/InterfaceMedia/GetMediaIdResponse")]
        System.Threading.Tasks.Task<int> GetMediaIdAsync(string mediaPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllMedia", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllMediaResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Media>> GetAllMediaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllMediaByMediaId", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllMediaByMediaIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Media>> GetAllMediaByMediaIdAsync(int media);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllMediaByName", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllMediaByNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Media>> GetAllMediaByNameAsync(string mediaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/CreateTag", ReplyAction="http://tempuri.org/InterfaceTag/CreateTagResponse")]
        System.Threading.Tasks.Task<bool> CreateTagAsync(string valueOfTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/CreateDateTag", ReplyAction="http://tempuri.org/InterfaceTag/CreateDateTagResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> CreateDateTagAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/CreateTagAnReturnTag", ReplyAction="http://tempuri.org/InterfaceTag/CreateTagAnReturnTagResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> CreateTagAnReturnTagAsync(string valueOfTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/DeleteTag", ReplyAction="http://tempuri.org/InterfaceTag/DeleteTagResponse")]
        System.Threading.Tasks.Task<bool> DeleteTagAsync(ServiceReferenceMedia.Tags deletedTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/UpdateTag", ReplyAction="http://tempuri.org/InterfaceTag/UpdateTagResponse")]
        System.Threading.Tasks.Task<bool> UpdateTagAsync(ServiceReferenceMedia.Tags updatedTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/GetTag", ReplyAction="http://tempuri.org/InterfaceTag/GetTagResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> GetTagAsync(string givenTagValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/GetTagAll", ReplyAction="http://tempuri.org/InterfaceTag/GetTagAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Tags>> GetTagAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTag/GetTagsByTableWayId", ReplyAction="http://tempuri.org/InterfaceTag/GetTagsByTableWayIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Tags>> GetTagsByTableWayIdAsync(int tableWayId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/Create", ReplyAction="http://tempuri.org/InterfaceTagTypes/CreateResponse")]
        System.Threading.Tasks.Task<bool> CreateAsync(string valueOfTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/CreateAndReturn", ReplyAction="http://tempuri.org/InterfaceTagTypes/CreateAndReturnResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> CreateAndReturnAsync(string valueOfTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/CreateTagTypeAndReturnIt", ReplyAction="http://tempuri.org/InterfaceTagTypes/CreateTagTypeAndReturnItResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> CreateTagTypeAndReturnItAsync(string valueOfTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/DeleteTagType", ReplyAction="http://tempuri.org/InterfaceTagTypes/DeleteTagTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteTagTypeAsync(ServiceReferenceMedia.TagType givenTagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/UpdateTagType", ReplyAction="http://tempuri.org/InterfaceTagTypes/UpdateTagTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateTagTypeAsync(ServiceReferenceMedia.TagType newTagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/GetTagTypeById", ReplyAction="http://tempuri.org/InterfaceTagTypes/GetTagTypeByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> GetTagTypeByIdAsync(int givenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTagTypes/GetTagTypeByString", ReplyAction="http://tempuri.org/InterfaceTagTypes/GetTagTypeByStringResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> GetTagTypeByStringAsync(string givenValueTagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/CreateTableWay", ReplyAction="http://tempuri.org/InterfataTableWay/CreateTableWayResponse")]
        System.Threading.Tasks.Task<bool> CreateTableWayAsync(ServiceReferenceMedia.Media media, ServiceReferenceMedia.Tags tag, ServiceReferenceMedia.TagType tagType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/DeleteTableWay", ReplyAction="http://tempuri.org/InterfataTableWay/DeleteTableWayResponse")]
        System.Threading.Tasks.Task<bool> DeleteTableWayAsync(ServiceReferenceMedia.Media media);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/GetTableWays", ReplyAction="http://tempuri.org/InterfataTableWay/GetTableWaysResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.TableWays>> GetTableWaysAsync(ServiceReferenceMedia.Media media);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/GetTableWaysTagsId", ReplyAction="http://tempuri.org/InterfataTableWay/GetTableWaysTagsIdResponse")]
        System.Threading.Tasks.Task<int> GetTableWaysTagsIdAsync(int mediaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/GetTableWaysIdTagsCategory", ReplyAction="http://tempuri.org/InterfataTableWay/GetTableWaysIdTagsCategoryResponse")]
        System.Threading.Tasks.Task<int> GetTableWaysIdTagsCategoryAsync(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/GetTableWaysIdTagsCategoryForDATE", ReplyAction="http://tempuri.org/InterfataTableWay/GetTableWaysIdTagsCategoryForDATEResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> GetTableWaysIdTagsCategoryForDATEAsync(int mediaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/GetTableWaysIdMediaAfterIdTagType", ReplyAction="http://tempuri.org/InterfataTableWay/GetTableWaysIdMediaAfterIdTagTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetTableWaysIdMediaAfterIdTagTypeAsync(int tagTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfataTableWay/GetTableWaysIdMediaAfterIdTag", ReplyAction="http://tempuri.org/InterfataTableWay/GetTableWaysIdMediaAfterIdTagResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetTableWaysIdMediaAfterIdTagAsync(int tagId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMyBdChannel : ServiceReferenceMedia.IMyBd, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MyBdClient : System.ServiceModel.ClientBase<ServiceReferenceMedia.IMyBd>, ServiceReferenceMedia.IMyBd
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MyBdClient() : 
                base(MyBdClient.GetDefaultBinding(), MyBdClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMyBd.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyBdClient(EndpointConfiguration endpointConfiguration) : 
                base(MyBdClient.GetBindingForEndpoint(endpointConfiguration), MyBdClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyBdClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MyBdClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyBdClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MyBdClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyBdClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> CreateMediaAsync(string pathName)
        {
            return base.Channel.CreateMediaAsync(pathName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMediaByPathAsync(string mediaPath)
        {
            return base.Channel.DeleteMediaByPathAsync(mediaPath);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMediaByMediaAsync(ServiceReferenceMedia.Media media)
        {
            return base.Channel.DeleteMediaByMediaAsync(media);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMediaAsync(ServiceReferenceMedia.Media newMedia)
        {
            return base.Channel.UpdateMediaAsync(newMedia);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Media> GetMediaByPathAsync(string mediaPath)
        {
            return base.Channel.GetMediaByPathAsync(mediaPath);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Media> GetMediaByIdAsync(int mediaID)
        {
            return base.Channel.GetMediaByIdAsync(mediaID);
        }
        
        public System.Threading.Tasks.Task<int> GetMediaIdAsync(string mediaPath)
        {
            return base.Channel.GetMediaIdAsync(mediaPath);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Media>> GetAllMediaAsync()
        {
            return base.Channel.GetAllMediaAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Media>> GetAllMediaByMediaIdAsync(int media)
        {
            return base.Channel.GetAllMediaByMediaIdAsync(media);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Media>> GetAllMediaByNameAsync(string mediaName)
        {
            return base.Channel.GetAllMediaByNameAsync(mediaName);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTagAsync(string valueOfTag)
        {
            return base.Channel.CreateTagAsync(valueOfTag);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> CreateDateTagAsync(string date)
        {
            return base.Channel.CreateDateTagAsync(date);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> CreateTagAnReturnTagAsync(string valueOfTag)
        {
            return base.Channel.CreateTagAnReturnTagAsync(valueOfTag);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTagAsync(ServiceReferenceMedia.Tags deletedTag)
        {
            return base.Channel.DeleteTagAsync(deletedTag);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTagAsync(ServiceReferenceMedia.Tags updatedTag)
        {
            return base.Channel.UpdateTagAsync(updatedTag);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> GetTagAsync(string givenTagValue)
        {
            return base.Channel.GetTagAsync(givenTagValue);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Tags>> GetTagAllAsync()
        {
            return base.Channel.GetTagAllAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.Tags>> GetTagsByTableWayIdAsync(int tableWayId)
        {
            return base.Channel.GetTagsByTableWayIdAsync(tableWayId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsync(string valueOfTag)
        {
            return base.Channel.CreateAsync(valueOfTag);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> CreateAndReturnAsync(string valueOfTag)
        {
            return base.Channel.CreateAndReturnAsync(valueOfTag);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> CreateTagTypeAndReturnItAsync(string valueOfTag)
        {
            return base.Channel.CreateTagTypeAndReturnItAsync(valueOfTag);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTagTypeAsync(ServiceReferenceMedia.TagType givenTagType)
        {
            return base.Channel.DeleteTagTypeAsync(givenTagType);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTagTypeAsync(ServiceReferenceMedia.TagType newTagType)
        {
            return base.Channel.UpdateTagTypeAsync(newTagType);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> GetTagTypeByIdAsync(int givenId)
        {
            return base.Channel.GetTagTypeByIdAsync(givenId);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.TagType> GetTagTypeByStringAsync(string givenValueTagType)
        {
            return base.Channel.GetTagTypeByStringAsync(givenValueTagType);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTableWayAsync(ServiceReferenceMedia.Media media, ServiceReferenceMedia.Tags tag, ServiceReferenceMedia.TagType tagType)
        {
            return base.Channel.CreateTableWayAsync(media, tag, tagType);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTableWayAsync(ServiceReferenceMedia.Media media)
        {
            return base.Channel.DeleteTableWayAsync(media);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMedia.TableWays>> GetTableWaysAsync(ServiceReferenceMedia.Media media)
        {
            return base.Channel.GetTableWaysAsync(media);
        }
        
        public System.Threading.Tasks.Task<int> GetTableWaysTagsIdAsync(int mediaId)
        {
            return base.Channel.GetTableWaysTagsIdAsync(mediaId);
        }
        
        public System.Threading.Tasks.Task<int> GetTableWaysIdTagsCategoryAsync(int tagId)
        {
            return base.Channel.GetTableWaysIdTagsCategoryAsync(tagId);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Tags> GetTableWaysIdTagsCategoryForDATEAsync(int mediaId)
        {
            return base.Channel.GetTableWaysIdTagsCategoryForDATEAsync(mediaId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetTableWaysIdMediaAfterIdTagTypeAsync(int tagTypeId)
        {
            return base.Channel.GetTableWaysIdMediaAfterIdTagTypeAsync(tagTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetTableWaysIdMediaAfterIdTagAsync(int tagId)
        {
            return base.Channel.GetTableWaysIdMediaAfterIdTagAsync(tagId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMyBd))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMyBd))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MyBdClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMyBd);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MyBdClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMyBd);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMyBd,
        }
    }
}
